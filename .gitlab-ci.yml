.image: alpine:3.17

stages:
  - test
  - sonarCheck
  - format
  - build

# shared variables between all sonarCheck jobs
variables:
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/code/.sonar"
  GIT_DEPTH: "0"

.before_script_template:
  before_script:
    - apk add --update maven

.unit-test-job:
  extends: .before_script_template
  stage: test
  script:
    - cd tempera-server
    - echo "Running unit tests..."
    - mvn test
  allow_failure: true

.java-sonarqube-check:
  extends: .before_script_template
  stage: sonarCheck
  script:
    - cd tempera-server
    - echo Running sonar analysis for ${SONAR_PROJECT_KEY}
    - mvn -Dsonar.projectKey=${SONAR_PROJECT_KEY} -Dsonar.projectName="${CI_PROJECT_NAME} backend ${GITLAB_USER_NAME}" --fail-at-end verify sonar:sonar
  allow_failure: true

.python-format-job:
  # make the pipeline fail if python project files are not formatted properly with black
  stage: format
  image:
    python:3.11.8-alpine
  script:
    - pip install black>=24.3.0
    - black tempera-accesspoint/ --check --verbose --diff --color
  allow_failure: true

.python-build-job:
  stage: build
  image: python:3.11.8-alpine
  script:
    - python --version ; pip --version
    - python -m venv venv
    - source venv/bin/activate
    - pip install build
    - python -m build tempera-accesspoint/
  artifacts:
    paths:
      - tempera-accesspoint/dist/*
    expire_in: 2 days

pages:
  stage: build
  image: sphinxdoc/sphinx
  script:
    - pip install tempera-accesspoint
    - cd tempera-accesspoint/docs
    - make html
    - mv build public
  artifacts:
    paths:
      - public

.python-sonarqube-check:
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [ "" ]
  stage: sonarCheck
  script:
    - echo Running sonar analysis of the Raspberry code for ${SONAR_PROJECT_KEY}
    - sonar-scanner -Dsonar.login=${SONAR_ACCESSPOINT_TOKEN} -Dsonar.sources=tempera-accesspoint/src -Dsonar.projectKey=${SONAR_ACCESSPOINT_PROJECT_KEY} -Dsonar.projectName="${CI_PROJECT_NAME} access point ${GITLAB_USER_NAME}" -Dsonar.python.version=3.11.8
  allow_failure: true

.typescript-sonarqube-check:
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [ "" ]
  stage: sonarCheck
  script:
    - echo Running sonar analysis of the front end code for ${SONAR_PROJECT_KEY}
    - sonar-scanner -Dsonar.login=${SONAR_FRONTEND_TOKEN} -Dsonar.sources=tempera-server/webapp -Dsonar.projectKey=${SONAR_FRONTEND_PROJECT_KEY} -Dsonar.projectName="${CI_PROJECT_NAME} frontend ${GITLAB_USER_NAME}"
  allow_failure: true